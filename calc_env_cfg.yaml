uvmf:
  environments:
    "calc" :
      ## Agents are defined in a LIST so that the order is maintained. This is important
      ## because of how the BFMs are passed in at the bench utilize this same order when
      ## this environment's initialize() routine is called.
      agents :
        - name: "key_in"
          type: "key"
        - name: "sseg_out"
          type: "sseg"
      ## Analysis components are defined externally in a 'util_components' structure.
      ## They are instantiated here.
      ## Define top-level analysis ports here. Keyed by the name of each
      ## one, specify the type of transaction passing through as well as
      ## which internal component will be driving the AP.
      analysis_ports :
        - name: "key_in_ap"
          trans_type: "key_transaction"
          connected_to: "key_in.monitored_ap"
        - name: "sseg_out_ap"
          trans_type: "sseg_transaction"
          connected_to: "sseg_out.monitored_ap"
      ## Define top-level analysis exports. Keyed by the unique name of each
      ## one, specify the type of transaction passing through as well as
      # ## which internal component will be driven by this port.
      # analysis_exports :
      #   - name: "external_pkt_ep"
      #     trans_type: "pkt_transaction"
      #     connected_to: "block_a_pred.secure_data_plane_in_ae"
      ## Define internal TLM connections. Each entry must have a 'driver' and
      ## a 'receiver' entry used to determine the full connection.
      # tlm_connections :
      #   - driver:   "control_plane_in.monitored_ap"
      #     receiver: "block_a_pred.control_plane_in_ae"
      #   - driver:   "secure_data_plane_in.monitored_ap"
      #     receiver: "block_a_pred.secure_data_plane_in_ae"
      #   - driver:   "block_a_pred.control_plane_sb_ap"
      #     receiver: "control_plane_sb.expected_analysis_export"
      #   - driver:   "block_a_pred.secure_data_plane_sb_ap"
      #     receiver: "secure_data_plane_sb.expected_analysis_export"
      #   - driver:   "control_plane_out.monitored_ap"
      #     receiver: "control_plane_sb.actual_analysis_export"
      #   - driver:   "secure_data_plane_out.monitored_ap"
      #     receiver: "secure_data_plane_sb.actual_analysis_export"
      ## Environment-level configuration variables. Each entry is keyed with a
      ## unique name and is assigned a 'type' and 'isrand' value.
      # config_vars :
      #   - { name: "block_a_cfgVar1", type : "bit", isrand : "False" }
      #   - { name: "block_a_cfgVar3", type : "bit [3:0]", isrand : "True"}
      #   - { name: "block_a_cfgVar4", type : "int", isrand : "True" }
      #   - { name: "block_a_cfgVar5", type : "int", isrand : "True" }
      ## Environment-level configuration constraints. Each entry is keyed with
      # ## a unique name  with the value being an SVA constraint block
      # config_constraints:
      #   - { name: "element_range_c", value: "{ block_a_cfgVar4>block_a_cfgVar5; }" }
      #   - { name: "non_negative_c", value: "{ (block_a_cfgVar1==0) -> block_a_cfgVar4==0;}" }
